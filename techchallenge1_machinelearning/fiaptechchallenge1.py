# -*- coding: utf-8 -*-
"""FiapTechChallenge1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zjH1NBu9dqY0oVFom6S1BlQNaY6q643p

# Pós Tech IA para Devs - 2024

## Tech Challenge 1

### Objetivo:

Prever o valor dos custos médicos individuais cobrados pelo seguro de saúde

### Dataset:
Dataset obtido do kaggle em: https://www.kaggle.com/datasets/mirichoi0218/insurance

arquivo insurance.csv com 16kb de dados contendo

* age: age of primary beneficiary
* sex: insurance contractor gender, female, male
* bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height,
objective index of body weight (kg / m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9
* children: Number of children covered by health insurance / Number of dependents
* smoker: Smoking
* region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.
* charges: Individual medical costs billed by health insurance

# 1. Importando libs
"""

import pandas as pd
from matplotlib import pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn.tree import DecisionTreeRegressor
import seaborn as sns

np.random.seed(13)

"""# 2. Analisando os dados"""

# Ler o arquivo csv usando panda e armazenar o dataframe
insurance = pd.read_csv("insurance.csv", parse_dates= True)

# Visualiza primeiras linhas do dataset com head()
insurance.head()

insurance.shape

"""O dataset tem 1338 linhas e 7 collunas"""

# @title Visualizar alguns dados com info()
insurance.info()

"""Não tem nenhuma linha com null.
As colunas sex, smoker e region não são numéricas. Precisaremos tratá-las
"""

# @title visualizar o conteúdo da coluna region
set(insurance["region"])

"""Temos 4 categorias de region"""

# @title contar a quantidade de cada region
insurance["region"].value_counts()

# @title analisar com describe()
insurance.describe()

# @title Histogramas
insurance.hist()

# @title Histograma da coluna age
insurance['age'].plot(kind='hist', bins=20, title='age')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Histograma da coluna bmi

from matplotlib import pyplot as plt
insurance['bmi'].plot(kind='hist', bins=20, title='bmi')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title histograma da coluna children

from matplotlib import pyplot as plt
insurance['children'].plot(kind='hist', bins=20, title='children')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title histograma da coluna charges

from matplotlib import pyplot as plt
insurance['charges'].plot(kind='hist', bins=20, title='charges')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title divisão dos dados por sexo

from matplotlib import pyplot as plt
import seaborn as sns
insurance.groupby('sex').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title divisão dos dados por smoker

from matplotlib import pyplot as plt
import seaborn as sns
insurance.groupby('smoker').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title divisao por region

from matplotlib import pyplot as plt
import seaborn as sns
insurance.groupby('region').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Analisar relação entre imc e charges

from matplotlib import pyplot as plt
insurance.plot(kind='scatter', x='bmi', y='charges', s=32, alpha=.4)
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Analisar relação entre age vs charges

from matplotlib import pyplot as plt
insurance.plot(kind='scatter', x='age', y='charges', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Relação entre sex vs charges com boxplot

plt.figure(figsize=(8, 6))
sns.boxplot(x='sex', y='charges', data=insurance)
plt.xlabel('Sex')
plt.ylabel('Charges')
plt.title('Box Plot of Charges by Sex')
plt.show()

# @title Relação entre smoker vs charges com boxplot

plt.figure(figsize=(8, 6))
sns.boxplot(x='smoker', y='charges', data=insurance)
plt.xlabel('Smoker')
plt.ylabel('Charges')
plt.title('Box Plot of Charges by Smoker')
plt.show()

# @title Relação entre region vs charges com boxplot

plt.figure(figsize=(8, 6))
sns.boxplot(x='region', y='charges', data=insurance)
plt.xlabel('Region')
plt.ylabel('Charges')
plt.title('Box Plot of Charges by Region')
plt.show()

"""Indivíduos fumantes geram maior custo"""

# @title Visualização dos dados previstos

# Filter data based on sex and smoker
male_smoker_df = insurance.loc[
    (insurance['sex'] == 'male') & (insurance['smoker'] ==  'yes')
]
male_non_smoker_df = insurance.loc[
    (insurance['sex'] == 'male') & (insurance['smoker'] == 'no')
]
female_smoker_df = insurance.loc[
    (insurance['sex'] == 'female') & (insurance['smoker'] == 'yes')
]
female_non_smoker_df = insurance.loc[
    (insurance['sex'] == 'female') & (insurance['smoker'] == 'no')
]

# Create the scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(male_non_smoker_df['age'], male_non_smoker_df['charges'], color='blue', marker='o', alpha=0.3, label='Male (Non-Smoker)')
plt.scatter(female_non_smoker_df['age'], female_non_smoker_df['charges'], color='red', marker='o', alpha=0.3, label='Female (Non-Smoker)')
plt.scatter(male_smoker_df['age'], male_smoker_df['charges'], color='blue', marker='x',alpha=0.3,  label='Male (Smoker)')
plt.scatter(female_smoker_df['age'], female_smoker_df['charges'], color='red', marker='x', alpha=0.3, label='Female (Smoker)')


# Set labels and title
plt.xlabel('Age')
plt.ylabel('Charges')
plt.title('Scatter Chart: Age vs. Charges by Sex and Smoker')
plt.legend()

# Show the plot
plt.show()

"""# Tratamento dos dados"""

# @title tratar colunas sex e smoker como binario usando label encoder
label_encoder = LabelEncoder()
insurance["sex"] = label_encoder.fit_transform(insurance["sex"])
insurance["smoker"] = label_encoder.fit_transform(insurance["smoker"])

insurance.head()

# @title transformar coluna region com one hot encode
dummy_region=pd.get_dummies(insurance['region'], prefix='dummy')
insurance_dummy = pd.concat([insurance, dummy_region], axis=1)
insurance_dummy.drop(["region"], axis=1, inplace=True)

insurance_dummy.head()

# @title separar dados em x e y
input = insurance_dummy[["age","sex","bmi","children","smoker","dummy_northeast","dummy_northwest","dummy_southeast","dummy_southwest"]]
output = insurance_dummy["charges"]

input.head()

output.head()

# @title Dividir dados em treino e teste
x_train, x_test, y_train, y_test = train_test_split(input, output, test_size=0.2, random_state=13)

print(len(x_train)," linhas em treino + ",len(x_test), " linhas em teste")

# @title aplicar standard scaler em X
scaler = StandardScaler()
scaler.fit(x_train)
x_train_std_scaler = scaler.transform(x_train)
x_test_std_scaler = scaler.transform(x_test)

x_train_std_scaler_df = pd.DataFrame(x_train_std_scaler, columns=x_train.columns)
x_train_std_scaler_df.head()

"""# Treinar o modelo Linear Regression"""

# @title Aplicar modelo de LinearRegression
lin_reg_std_scaler = LinearRegression()
lin_reg_std_scaler.fit(x_train_std_scaler, y_train)

# @title predict com LinearRegression
y_lin_std_scaler_predito =  lin_reg_std_scaler.predict(x_test_std_scaler)

"""# Avaliar resultados de Linear Regression"""

# calcular mse, rmse, mae, r2 and mape(Mean Absolute Percentage Error)
def metrics(test, predito):
  mse = mean_squared_error(test, predito)
  rmse = np.sqrt(mse)
  mae = mean_absolute_error(test, predito)
  r2 = r2_score(test, predito)

  errors = np.abs(test - predito)
  relative_errors = errors / np.abs(test)
  mape = np.mean(relative_errors)

  print("mse:", mse, " rmse:", rmse, " mae:", mae, " r2:", r2, " mape:", mape)

metrics(test=y_test, predito=y_lin_std_scaler_predito)

"""# Testar modelo LinearRegression sem StandardScaler e com MinMaxScaler"""

# @title Aplicar modelo LinearReegression sem StandardScaler
lin_reg = LinearRegression()
lin_reg.fit(x_train, y_train)
y_lin_predito =  lin_reg.predict(x_test)
metrics(test=y_test, predito=y_lin_predito)

# @title Aplicar modelo LinearReegression com MinMaxScaler
minMaxScaler = MinMaxScaler()
minMaxScaler.fit(x_train)
x_train_min_max_scaler = minMaxScaler.transform(x_train)
x_test_min_max_scaler = minMaxScaler.transform(x_test)

x_train_min_max_scaler_df = pd.DataFrame(x_train_min_max_scaler, columns=x_train.columns)
x_train_min_max_scaler_df.head()

lin_reg_min_max_scaler = LinearRegression()
lin_reg_min_max_scaler.fit(x_train_min_max_scaler, y_train)
y_lin_min_max_scaler_predito =  lin_reg_min_max_scaler.predict(x_test_min_max_scaler)
metrics(test=y_test, predito=y_lin_min_max_scaler_predito)

"""LinearRegression teve resultado ruim sem Scaler ou com StandardScaler ou MinMaxScaler. R2 de 0.79 e mape de 0.41 me parece ruim

# Aplicar DecisionTreeRegression
"""

dtr = DecisionTreeRegressor(max_depth=9) # testando com depth=9 pois temos 9 features
dtr.fit(x_train_min_max_scaler, y_train) # usando input com min_max_scaler, me parece fazer mais sentido ter só dados positivos
y_dtr = dtr.predict(x_test_min_max_scaler)
metrics(test=y_test, predito=y_dtr)

"""Resultado já foi melhor com r2=0.85

# Experimentando um outro modelo de regressão Ridge
"""

ridge = Ridge()
ridge.fit(x_train_min_max_scaler, y_train)
y_ridge = ridge.predict(x_test_min_max_scaler)
metrics(test=y_test, predito=y_ridge)

"""Desepenho do Ridge foi pior com r2=0.79

# Conclusões

Para o dataset explorado, foram testados os modelos LinearRegression, Ridge e DecisionTreeRegressor com o objetivo de prever o custo médicos individuais de um indivíduo com base nas informações fornecidas: idade, sexo, imc, quantidade de filhos, fumante ou não e região em que mora.

A análise inicial dos dados indicou uma forte correlação entre a idade e o fato do indivíduo ser fumante ou não com os custos de saúde. Indivíduos mais velhos possuem maior custo assim como indivíduos fumantes possuem maior custo.

O modelo DecisionTreeRegressor foi o que apresentou melhor resultado com r2 = 0.85 e é o modelo escolhido

## Comparando resultado previsto do modelo com dados reais da massa de teste
"""

# @title Visualização dos dados de teste

# reconstruir um dataframe com x_test, y_test e y_dtr (resultado do predict de DecisionTreeRegressor) para pordermos visualizá-lo
results_df = pd.concat([x_test, y_test], axis=1)
results_df['charges_predicted'] = y_dtr

# Create the scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(results_df['age'], results_df['charges'], color='red', marker='o', label='Test Data')
plt.scatter(results_df['age'], results_df['charges_predicted'], color='blue', marker='x', label='Predicted Result')

# Set labels and title
plt.xlabel('Age')
plt.ylabel('Charges')
plt.title('Scatter Chart: Age vs. Charges - Test Data')
plt.legend()

# Show the plot
plt.show()