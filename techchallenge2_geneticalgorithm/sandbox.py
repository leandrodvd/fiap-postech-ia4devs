import gymnasium as gym
import moviepy.editor as mpy
import numpy as np

env = gym.make("LunarLander-v2", render_mode="rgb_array")
observation, info = env.reset(seed=42)
# individual=[1,0,3,3,1,1,1,2,1,2,1,2,0,2,1,1,1,2,2,0,0,3,1,1,1,2,3,2,2,3,0,1,2,1,2,0,1,1,0,1,2,0,0,3,2,1,2,3,0,3,3,1,1,3,0,1,3,3,2,1,0,2,1,3,2,3,3,0,3,0,3,1,3,2,2,1,3,1,3,3,1,2,3,0,0,3,0,0,3,3,0,2,2,2,3,0,3,2,1,1,1,3,3,1,0,1,3,0,3,1,3,3,0,0,2,1,3,3,2,0,1,2,1,2,1,3,3,0,2,0,0,3,1,1,2,2,3,1,3,3,0,1,1,3,0,0,3,1,3,2,0,1,2,2,1,2,2,2,0,0,0,0,1,0,3,0,3,0,2,3,0,3,3,0,0,1,3,1,3,0,3,3,0,0,1,1,0,3,1,1,1,2,0,0,1,0,0,2,0,1]
# individual = [1,3,3,1,1,0,0,2,3,3,3,2,3,1,1,2,2,3,0,0,0,0,1,0,3,2,3,3,1,2,1,2,2,3,0,1,0,2,2,2,3,2,2,3,3,0,2,3,1,0,2,0,2,3,3,3,1,1,2,1,3,2,1,3,0,1,0,2,3,3,1,3,2,0,0,0,2,0,3,1,1,1,1,3,3,1,1,1,1,3,2,1,0,2,1,3,3,0,3,2,3,3,3,0,0,2,0,1,3,0,1,2,3,3,0,0,1,1,0,0,3,1,1,1,3,1,3,2,3,3,3,1,2,3,1,3,2,1,2,2,3,0,1,3,3,3,3,0,3,1,2,3,0,0,2,2,0,2,3,3,1,0,3,3,0,2,1,1,3,1,1,0,3,3,0,2,1,1,0,3,1,2,2,0,0,3,3,1,0,1,3,2,0,2,0,1,1,1,2,0,3,2,1,3,3,1,0,3,1,0,0,1,3,1,3,0,1,2,3,0,3,1,3,0,1,1,0,2,0,2,1,3,3,3,3,1,3,0,1,3,3,0,0,2,3,2,0,0,1,1,0,3,3,0,1,1,0,3,2,0,2,0,3,0,0,1,2,0,1,1,2,3,2,2,1,3,0,0,0,1,1,3,2,1,0,2,1,3,1,2,1,0,3,3,2,2,1,0,3,0,1,0,3,3,2,0,2,0,3,2,3,3,0,1,0,1,2,3,1,0,3,3,0,1,0,0,0,1,0,2,3,1,3,2,0,1,0,3,1,0,0,1,3,1,0,0,0,2,0,1,3,3,2,3,3,0,2,3,3,1,0,1,0,3,2,0,2,3,1,2,0,0,0,1,2,3,2,2,1,1,0,2,2,0,3,0,3,0,0,2,1,0,0,1,2,1,1,2,0,3]
# individual = [3,1,1,3,1,0,0,1,2,2,0,1,0,2,3,1,2,1,1,0,0,0,3,1,1,0,0,2,2,2,0,1,3,1,2,0,0,2,1,2,0,3,1,1,0,0,3,1,0,2,0,3,2,1,0,2,0,0,3,1,3,3,2,2,2,3,2,0,1,1,2,1,3,0,1,1,2,2,1,1,2,2,0,3,2,2,2,3,3,0,1,2,3,2,1,0,1,3,3,2,2,3,1,1,3,1,1,3,2,1,0,2,1,3,1,0,1,0,2,3,1,1,0,2,0,3,1,0,3,3,1,0,0,3,0,1,0,1,1,3,1,3,0,2,1,1,0,2,2,0,1,2,1,2,3,3,2,2,2,1,2,3,0,3,1,0,1,3,2,0,0,1,1,3,3,0,1,1,0,0,3,3,3,0,0,1,3,0,1,0,1,2,1,1,2,3,0,0,0,2]
# individual = [3,1,3,1,0,1,3,1,1,2,3,2,1,0,3,3,1,2,0,1,0,3,2,1,2,1,2,3,2,1,2,0,3,1,1,1,0,1,2,1,0,1,1,0,1,2,3,3,1,2,3,0,3,3,0,1,0,1,2,1,0,2,3,2,2,0,2,0,3,1,0,2,0,2,1,1,1,0,0,0,0,2,2,0,3,2,1,2,1,2,2,2,0,3,1,3,0,0,3,2,3,1,3,0,2,2,1,2,1,3,3,1,1,1,3,3,0,1,0,2,2,1,2,3,2,3,2,3,1,0,0,3,3,0,3,3,1,3,3,3,0,1,0,3,2,3,1,3,1,2,1,2,0,1,3,2,1,2,0,3,0,2,2,2,1,1,2,2,1,1,3,3,2,1,2,2,3,2,0,1,1,2,0,1,0,2,3,2,0,3,0,1,3,2,0,1,1,2,1,2]
# individual = [2,1,1,1,1,2,2,1,3,3,2,1,0,3,2,0,2,1,0,2,3,1,1,1,1,2,0,0,0,2,0,1,3,1,2,2,2,2,3,3,2,0,0,1,2,2,0,2,2,0,2,3,1,3,0,2,0,2,2,1,1,1,1,0,0,2,0,3,2,1,1,3,3,1,0,3,2,3,3,3,0,2,2,3,3,3,1,2,2,1,1,2,0,0,2,3,3,3,3,3,0,1,3,1,2,3,1,0,3,3,2,2,3,3,3,3,2,0,1,2,1,1,0,2,1,2,1,3,3,3,3,0,1,1,2,2,0,2,0,3,1,2,3,0,0,3,1,0,0,1,1,1,1,0,0,1,1,3,0,0,3,2,0,2,2,1,0,3,1,3,3,2,2,2,0,1,0,1,0,3,2,2,3,0,0,0,1,1,1,2,1,0,2,3,1,3,2,1,3,1]
individual = [1,0,1,1,3,1,0,1,1,0,0,2,2,1,2,1,2,2,3,2,0,2,0,1,2,2,3,2,2,1,3,0,3,1,2,1,2,0,0,1,2,2,3,3,2,0,2,3,0,2,0,3,2,3,3,0,0,1,2,3,2,1,2,1,1,3,2,3,3,1,3,2,3,3,1,3,2,3,2,2,3,1,3,1,2,1,3,0,2,1,0,1,1,1,3,1,2,0,2,0,1,1,3,2,2,3,3,1,0,0,3,1,1,3,2,2,2,0,3,3,2,3,3,0,0,1,0,1,0,1,0,0,1,1,1,0,0,1,3,0,1,0,1,1,3,3,2,0,3,0,3,3,3,2,1,3,0,2,2,0,2,2,2,2,3,1,3,1,2,2,2,3,2,0,1,0,3,2,1,3,0,3,3,0,0,1,1,1,3,1,1,0,0,0,1,3,1,0,1,0]
total_reward = 0;
frames = []
for i in range(len(individual)):
   action = individual[i]  # this is where you would insert your policy
   print ("i", i, "action", action )
   # print( env.action_space)
   # print ("action", action)
   # individual = [env.action_space.sample() for _ in range(200)]
   # individual=[1,0,3,3,1,1,1,2,1,2,1,2,0,2,1,1,1,2,2,0,0,3,1,1,1,2,3,2,2,3,0,1,2,1,2,0,1,1,0,1,2,0,0,3,2,1,2,3,0,3,3,1,1,3,0,1,3,3,2,1,0,2,1,3,2,3,3,0,3,0,3,1,3,2,2,1,3,1,3,3,1,2,3,0,0,3,0,0,3,3,0,2,2,2,3,0,3,2,1,1,1,3,3,1,0,1,3,0,3,1,3,3,0,0,2,1,3,3,2,0,1,2,1,2,1,3,3,0,2,0,0,3,1,1,2,2,3,1,3,3,0,1,1,3,0,0,3,1,3,2,0,1,2,2,1,2,2,2,0,0,0,0,1,0,3,0,3,0,2,3,0,3,3,0,0,1,3,1,3,0,3,3,0,0,1,1,0,3,1,1,1,2,0,0,1,0,0,2,0,1]
   # print ("individual", individual[0])
   observation, reward, terminated, truncated, info = env.step(action)
   frames.append(env.render())
   total_reward += reward
   print ("total_reward", total_reward)
   if terminated or truncated:
      print("terminated", terminated)
      print("truncated", truncated)
      break;
      # observation, info = env.reset()

frames = [np.array(frame) for frame in frames]
# Debug: Print the shape of the first frame
print(f"Shape of first frame: {frames[0].shape}")
# Ensure all frames are the same size
height, width, _ = frames[0].shape  # Get the shape of the first frame
frames = [mpy.ImageClip(frame).resize((width, height)).img for frame in frames]

clip = mpy.ImageSequenceClip(frames, fps=30)
clip.write_videofile("video.mp4", codec="libx264")

env.close()